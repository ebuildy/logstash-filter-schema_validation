import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'

group 'org.logstash.plugins.input.http'
version "${new File("VERSION").text.trim()}"

description = "JSON schema validation"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile(group: 'javax.mail', name: 'javax.mail-api', version: '1.5.1')

    compile(group: "com.google.guava", name: "guava", version: "16.0.1")
    compile(group: "com.googlecode.libphonenumber", name: "libphonenumber", version: "8.0.0")

    //compile(group: "net.sf.jopt-simple", name: "jopt-simple", version: "5.0.3")
    //compile(group: "joda-time", name: "joda-time", version: "2.9.7")

    compile(group: "com.github.fge", name: "msg-simple", version: "1.1")
    compile(group: "com.github.fge", name: "btf", version: "1.2")
    compile(group: "com.github.fge", name: "uri-template", version: "0.9")
    compile(group: "com.github.java-json-tools", name: "jackson-coreutils", version: "1.9")
    compile(group: "com.github.java-json-tools", name: "json-schema-core", version: "1.2.10")
    compile(group: "com.github.java-json-tools", name: "json-schema-validator", version: "2.2.10")
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

task run (type: JavaExec, dependsOn: classes){
    // turn on or off ssl
    if(project.hasProperty('providedargs')){
        args(providedargs.split(','))
    }
    description = "Plugin testing"
    main = "org.logstash.plugins.input.http.Runner"
    classpath = sourceSets.main.runtimeClasspath
}

task generateGemJarRequiresFile {
    doLast {
        File jars_file = file('lib/logstash-filter-schema_validation.rb')
            jars_file.newWriter().withWriter { w ->
                w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
                    w << "require \'jar_dependencies\'\n"
                    configurations.runtime.allDependencies.each {
                        w << "require_jar(\'${it.group}\', \'${it.name}\', \'${it.version}\')\n"
                    }
                w << "require_jar(\'${project.group}\', \'${project.name}\', \'${project.version}\')\n"
            }
    }
}

task vendor {
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
            configurations.runtime.allDependencies.each { dep ->
                File f = configurations.runtime.filter { it.absolutePath.contains("${dep.group}/${dep.name}/${dep.version}") }.singleFile
                    String groupPath = dep.group.replaceAll('\\.', '/')
                    File newJarFile = file("${vendorPathPrefix}/${groupPath}/${dep.name}/${dep.version}/${dep.name}-${dep.version}.jar")
                    newJarFile.mkdirs()
                    Files.copy(f.toPath(), newJarFile.toPath(), REPLACE_EXISTING)
            }
        String projectGroupPath = project.group.replaceAll('\\.', '/')
            File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${project.name}/${project.version}/${project.name}-${project.version}.jar")
            projectJarFile.mkdirs()
            Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
    }
}

vendor.dependsOn(jar, generateGemJarRequiresFile)

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

task wrapper(type: Wrapper) {
    description = 'Install Gradle wrapper'
    gradleVersion = '2.14'
}
